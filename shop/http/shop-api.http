### IntelliJ HTTP Client: Shop API one-click test

# How to use:
# 1) Open this file in IntelliJ IDEA (Ultimate) or Rider.
# 2) At the top-right, select environment: dev8080/dev8081/dev8082 (defined in shop-api.env.json).
# 3) Click the green triangle "Run all requests" to execute the full flow.

### 0. Health — products public list (no auth)
GET {{base}}/products/public/list?page=1&size=5
Accept: application/json

### 1. Auth — login as ADMIN
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{admin_username}}",
  "password": "{{admin_password}}"
}

### 1.1 Auth — login as ADMIN (alt password set)
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{admin_username}}",
  "password": "{{admin_password_alt}}"
}

> {%
  try {
    var body = {};
    try { body = JSON.parse(response.body); } catch (e2) { body = response.body; }
    var token = null;
    if (body) {
      var hasData = (typeof body === 'object') && Object.prototype.hasOwnProperty.call(body, 'data');
      var data = hasData ? body.data : body;
      if (typeof data === 'string') token = data;
      else if (data && typeof data === 'object') token = data.token || data.accessToken || data.jwt;
    }
    if (token && typeof token === 'string' && token.indexOf('Bearer ') === 0) {
      token = token.substring(7);
    }
    if (token) {
      client.global.set("token_admin", token);
      client.log("ADMIN token captured");
    } else {
      client.log("WARN: could not find token in login response");
    }
  } catch (e) {
    client.log("WARN: failed to parse login response: " + e.message);
  }
%}

### 2. Admin — list users
GET {{base}}/admin/users
Accept: application/json
Authorization: Bearer {{token_admin}}

### 3. Auth — login as MERCHANT
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{merchant_username}}",
  "password": "{{merchant_password}}"
}

### 3.1 Auth — login as MERCHANT (alt password set)
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{merchant_username}}",
  "password": "{{merchant_password_alt}}"
}

> {%
  try {
    var body = JSON.parse(response.body);
    var token = null;
    var data = (body && typeof body === 'object' && Object.prototype.hasOwnProperty.call(body, 'data')) ? body.data : body;
    if (typeof data === 'string') token = data;
    else if (data && typeof data === 'object') token = data.token || data.accessToken || data.jwt;
    if (token && typeof token === 'string' && token.indexOf('Bearer ') === 0) {
      token = token.substring(7);
    }
    if (token) {
      client.global.set("token_merchant", token);
      client.log("MERCHANT token captured");
    }
  } catch (e) {}
%}

### 4. Merchant — who am I
GET {{base}}/merchant/me
Accept: application/json
Authorization: Bearer {{token_merchant}}

### 5. Merchant — my products (paged)
GET {{base}}/merchant/products?page=1&size=5
Accept: application/json
Authorization: Bearer {{token_merchant}}

### 6. Public — banners list (no auth)
GET {{base}}/banners/public/list
Accept: application/json

### 6.1 Public — categories tree (after recursion fix)
GET {{base}}/categories/public/tree
Accept: application/json

### 6.2 Admin — create banner
POST {{base}}/banners/admin/create
Content-Type: application/json
Authorization: Bearer {{token_admin}}

{
  "title": "首页主图",
  "imageUrl": "https://example.com/cover.jpg",
  "linkUrl": "https://example.com",
  "sortOrder": 10,
  "status": "ENABLED"
}

### 6.3 Admin — delete banner
DELETE {{base}}/banners/admin/1
Authorization: Bearer {{token_admin}}

### 7. Auth — login as USER
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{user_username}}",
  "password": "{{user_password}}"
}

### 7.1 Auth — login as USER (alt password set)
POST {{base}}/auth/login
Content-Type: application/json

{
  "username": "{{user_username}}",
  "password": "{{user_password_alt}}"
}

> {%
  try {
    var body = JSON.parse(response.body);
    var token = null;
    var data = (body && typeof body === 'object' && Object.prototype.hasOwnProperty.call(body, 'data')) ? body.data : body;
    if (typeof data === 'string') token = data;
    else if (data && typeof data === 'object') token = data.token || data.accessToken || data.jwt;
    if (token && typeof token === 'string' && token.indexOf('Bearer ') === 0) {
      token = token.substring(7);
    }
    if (token) {
      client.global.set("token_user", token);
      client.log("USER token captured");
    }
  } catch (e) {}
%}

### 8. User — cart list (safe GET)
GET {{base}}/cart/list
Accept: application/json
Authorization: Bearer {{token_user}}

# Notes:
# - If some endpoints return 404/403, verify your roles, initial data, and controller mappings.
# - Category tree endpoint is intentionally omitted due to known recursion issue in serialization awaiting fix.

GET http://localhost:8080/api/admin/users
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJBRE1JTiIsImV4cCI6MTc1NTgyNzUyMSwiaWF0IjoxNzU1NzQxMTIxfQ.tcfEgfMfXRCDd3-TDmudNFhnt9CvNIVGn8B9LhRQEOZOiP7_xcHv8NhWSi_lhCu7ISjLuLYzO1EfcCR7YvKghA



GET http://localhost:8080/api/admin/users
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJBRE1JTiIsImV4cCI6MTc1NTgyNzUyMSwiaWF0IjoxNzU1NzQxMTIxfQ.tcfEgfMfXRCDd3-TDmudNFhnt9CvNIVGn8B9LhRQEOZOiP7_xcHv8NhWSi_lhCu7ISjLuLYzO1EfcCR7YvKghA

###

# curl http://localhost:8080/api/categories/public/tree
GET http://localhost:8080/api/categories/public/tree

###

